;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Az Digital 2 Project
;Version :
;Date    : 22/01/2025
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdbool.h>
;#include <delay.h>
;#include <stdio.h>
;#include <twi.h>
;
;
;// --------------------------------- definitions ---------------------------------------
;
;#define LCD_I2C_ADDR       0x3F
;
;// LM75 with A2=0, A1=1, A0=1
;#define LM75_I2C_ADDR      0x4B
;
;volatile int seconds = 0, minutes = 0, hours = 0;
;volatile int second_flag = 0;  // updates when 1 second passed
;
;int fuel_level          = 100;
;int speed_value         = 0;  // from ADC (PA0)
;int steering_value      = 0;  // from ADC (PA1)
;//int direction           = 0;  // 0=Stop, 1=forward, -1=reverse
;int brake_applied       = 0;
;int headlights_on       = 0;
;//int current_menu        = 0;
;long int baseSpeed      = 0;
;long int scaledSpeed    = 0;
;long int steer_offset   = 0;
;long int offsetScaled   = 0;
;long int leftSpeedVal   = 0;
;long int rightSpeedVal  = 0;
;#define PWM_TOP 10000   // value of ICR1 to calculate pwm duty cycle
;//bool lcd_timer_on       = false;
;char buffer[20];
;//char buffer2[20];
;int temp                = 0;
;int directionFlag       = 0;   // -1 => reverse, 0 => stop, +1 => forward
;bool int_button_used    = false;
;bool turn_brake_light   = false;
;static int toggle       = 0;
;int toggle_4            = 0;
;char buffer_time[20];  // Enough for "HH:MM:SS"
;int firstKey;
;int secondKey;
;bool timer_toggle = true;

	.DSEG
;
;
;
;
;
;
;//---------------------------------------------------------------------------
;// Function Prototypes
;//---------------------------------------------------------------------------
;
;// Keypad
;int  read_keypad_2x2(void);
;
;// Car control helpers
;void update_fuel_usage(void);
;void beep_when_reverse(void);
;
;// ------------------------ PCF8574 ----------------------------------------------------
;#define LCD_EN             0x04  // Enable bit
;#define LCD_RW             0x02  // Read/Write bit
;#define LCD_RS             0x01  // Register Select bit
;#define LCD_BACKLIGHT      0x08  // Backlight bit
;
;//---------------------- LCD FUNCTIONS -------------------------------------------------
;
;bool twi_lcd_write(int data)
; 0000 005E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 005F     unsigned char tx_data = (unsigned char)(data & 0xFF);
; 0000 0060 
; 0000 0061     // Keep backlight on:
; 0000 0062     tx_data |= LCD_BACKLIGHT;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	data -> Y+1
;	tx_data -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0063 
; 0000 0064     // Send 1 byte to the PCF8574
; 0000 0065     return twi_master_trans(LCD_I2C_ADDR, &tx_data, 1, 0, 0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0066 }
;PCODE: $00000026 VOL: 0
;
;// Send a 4-bit nibble to the LCD.
;void lcd_send_nibble(int nibble, int mode)
; 0000 006A {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 006B     int data_out = (nibble & 0xF0) | mode; // upper nibble + RS/RW bits
; 0000 006C 
; 0000 006D     // EN=0
; 0000 006E     twi_lcd_write(data_out);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;	nibble -> Y+4
;	mode -> Y+2
;	data_out -> R16,R17
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 006F 
; 0000 0070     // Pulse EN=1
; 0000 0071     twi_lcd_write(data_out | LCD_EN);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0072     delay_us(1);
;PCODE: $00000037 VOL: 0
; 0000 0073 
; 0000 0074     // EN=0
; 0000 0075     twi_lcd_write(data_out & ~LCD_EN);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0076     delay_us(50);
;PCODE: $0000003C VOL: 0
; 0000 0077 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;// Send a full byte (cmd/data) in 4-bit mode
;void lcd_send_byte(int value, int mode)
; 0000 007B {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 007C     // High nibble
; 0000 007D     lcd_send_nibble(value & 0xF0, mode);
;PCODE: $00000046 VOL: 0
;	value -> Y+2
;	mode -> Y+0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 007E     // Low nibble
; 0000 007F     lcd_send_nibble((value << 4) & 0xF0, mode);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0080 }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;
;// Send a command (RS=0)
;void lcd_cmd(int cmd)
; 0000 0084 {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0085     lcd_send_byte(cmd, 0);
;PCODE: $00000057 VOL: 0
;	cmd -> Y+0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0086 }
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;// Send data (RS=1)
;void lcd_data(int data)
; 0000 008A {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 008B     lcd_send_byte(data, LCD_RS);
;PCODE: $00000062 VOL: 0
;	data -> Y+0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 008C }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;
;void lcd_init(void)
; 0000 008F {
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0090     // Wait for LCD power-up
; 0000 0091     delay_ms(20);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0092 
; 0000 0093     // Per HD44780 init sequence: send 0x30 (8-bit mode) thrice
; 0000 0094     lcd_send_nibble(0x30, 0);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0095     delay_ms(5);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0096     lcd_send_nibble(0x30, 0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0097     delay_us(100);
;PCODE: $0000007D VOL: 0
; 0000 0098     lcd_send_nibble(0x30, 0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0099     delay_us(100);
;PCODE: $00000083 VOL: 0
; 0000 009A 
; 0000 009B     // Switch to 4-bit mode (0x20 = 4-bit)
; 0000 009C     lcd_send_nibble(0x20, 0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 009D     delay_us(100);
;PCODE: $00000089 VOL: 0
; 0000 009E 
; 0000 009F     // Function Set: 4-bit interface, 2 (or 4) lines, 5x8 font.
; 0000 00A0     // Even for a 20×4, set N=1 => 0x28
; 0000 00A1     lcd_cmd(0x28);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00A2 
; 0000 00A3     // Display off (D=0, C=0, B=0)
; 0000 00A4     lcd_cmd(0x08);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00A5 
; 0000 00A6     // Clear display
; 0000 00A7     lcd_cmd(0x01);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00A8     delay_ms(2);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A9 
; 0000 00AA     // Entry mode set: increment cursor, no shift (I/D=1, S=0)
; 0000 00AB     lcd_cmd(0x06);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00AC 
; 0000 00AD     // Display on, cursor off, blink off (D=1, C=0, B=0 => 0x0C)
; 0000 00AE     lcd_cmd(0x0C);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00AF }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;
;
;// Print a string at the current cursor
;void lcd_print(char *str)
; 0000 00B4 {
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00B5     while (*str)
;PCODE: $000000A0 VOL: 0
;	*str -> Y+0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00B6         lcd_data(*str++);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00B7 }
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;
;// Move cursor to (col, row) on a 16×2 display
;// Move cursor to (col, row) on a 20×4 display
;void lcd_gotoxy(int col, int row)
; 0000 00BC {
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00BD     int address;
; 0000 00BE 
; 0000 00BF     // Common DDRAM mapping for a 20×4 LCD:
; 0000 00C0     // Row0 => 0x00
; 0000 00C1     // Row1 => 0x40
; 0000 00C2     // Row2 => 0x14
; 0000 00C3     // Row3 => 0x54
; 0000 00C4     switch(row)
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;	col -> Y+4
;	row -> Y+2
;	address -> R16,R17
;PCODE: $000000B6 VOL: 0
; 0000 00C5     {
; 0000 00C6         case 0: address = 0x00; break;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00C7         case 1: address = 0x40; break;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00C8         case 2: address = 0x14; break;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00C9         case 3: address = 0x54; break;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00CA         default: address = 0x00; // fallback if row is out of range
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00CB     }
;PCODE: $000000D1 VOL: 0
; 0000 00CC 
; 0000 00CD     address += col; // add the column offset
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00CE 
; 0000 00CF     // Send "Set DDRAM address" command
; 0000 00D0     lcd_cmd(0x80 | address);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00D1 }
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;
;
;
;//-------------------------Menus codes -----------------------------------------------------
;
;void display_time_on_lcd(void)
; 0000 00D8 {
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00D9 
; 0000 00DA     // Format the time as "HH:MM:SS"
; 0000 00DB     sprintf(buffer_time, "%02d:%02d:%02d", hours, minutes, seconds);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 1
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 1
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 1
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00DC 
; 0000 00DD     // place it at row=0, col=0
; 0000 00DE     lcd_gotoxy(0, 3);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00DF     lcd_print("Time: ");
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00E0     lcd_print(buffer_time);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00E1 }
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0

	.DSEG
_0xF:
	.BYTE 0x7
;
;
;
;
;// ------------------------ LM75 Routines ------------------------
;
;// Write an arbitrary register in the LM75 (e.g. config, TOS, THYST)
;bool lm75_write_register(unsigned char reg, unsigned char *data, unsigned char length)
; 0000 00EA {

	.CSEG
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00EB     // For the LM75, the first byte is the register pointer
; 0000 00EC     // The following bytes are the data to write
; 0000 00ED     unsigned char tx_buffer[1 + 2]; // up to 1 register + 2 data bytes
; 0000 00EE     unsigned char i;
; 0000 00EF 
; 0000 00F0     if (length > 2) return false; // LM75 typically only needs up to 2 bytes
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;	reg -> Y+7
;	*data -> Y+5
;	length -> Y+4
;	tx_buffer -> Y+1
;	i -> R17
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00F1 
; 0000 00F2     tx_buffer[0] = reg;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00F3     for (i = 0; i < length; i++)
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00F4         tx_buffer[1 + i] = data[i];
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00F6 return twi_master_trans(0x4B, tx_buffer, (1 + length), 0, 0);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00F7 }
;PCODE: $00000138 VOL: 0
;
;// Set the LM75 configuration register (register 1).
;// For default (continuous, comparator mode, active-low OS), pass config=0.
;bool lm75_write_config(unsigned char config)
; 0000 00FC {
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00FD     unsigned char data = config;
; 0000 00FE     return lm75_write_register(1, &data, 1);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;	config -> Y+1
;	data -> R17
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00FF }
;PCODE: $0000014B VOL: 0
;
;// Set TOS (Overtemp Shutdown) register to 'tempC' degrees
;bool lm75_set_tos(int tempC)
; 0000 0103 {
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0104     // TOS is 2 bytes. In default 9-bit mode, the high byte has the sign+integer bits,
; 0000 0105     // and the fraction bit is bit 0. We'll ignore fractions and set TOS = tempC.0
; 0000 0106     // So upper byte = tempC, lower byte = 0.
; 0000 0107     //
; 0000 0108     // Example: 70 => 0x46 => 70 decimal.
; 0000 0109     // This sets TOS to +70.0 °C
; 0000 010A     unsigned char temp_data[2];
; 0000 010B     temp_data[0] = (unsigned char)(tempC & 0x7F); // sign=0, store up to 127
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;	tempC -> Y+2
;	temp_data -> Y+0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 010C     temp_data[1] = 0x00;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 010D 
; 0000 010E     return lm75_write_register(3, temp_data, 2); // TOS register = 3
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 010F }
;PCODE: $0000015D VOL: 0
;
;// Read the LM75 temperature (register 0) as an integer.
;// If 9-bit resolution (default), bit 7 of the lower byte is the 0.5 fraction bit.
;int lm75_read_temp(void)
; 0000 0114 {
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0115     unsigned char reg_pointer = 0;  // Temperature register = 0
; 0000 0116     unsigned char rx_data[2];
; 0000 0117     int tempC = 0;
; 0000 0118 
; 0000 0119     // First, set the register pointer to 0 with a write transaction
; 0000 011A     // but we don't send any data beyond the pointer.
; 0000 011B     if (!twi_master_trans(LM75_I2C_ADDR, &reg_pointer, 1, 0, 0))
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;	reg_pointer -> R17
;	rx_data -> Y+4
;	tempC -> R18,R19
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 011C         return -1000; // indicate error
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 011D 
; 0000 011E     // Now read 2 bytes from the temperature register
; 0000 011F     // (rx_data[0] = MSB, rx_data[1] = LSB)
; 0000 0120     if (!twi_master_trans(LM75_I2C_ADDR, 0, 0, rx_data, 2))
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0121         return -1000; // indicate error
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0122 
; 0000 0123     // In default 9-bit mode:
; 0000 0124     //  rx_data[0] bit 7 => sign (0 = positive)
; 0000 0125     //  rx_data[0] bits 6..0 => integer portion
; 0000 0126     //  rx_data[1] bit 7 => 0.5 fraction
; 0000 0127     //  We will do a simple rounding or floor approach.
; 0000 0128 
; 0000 0129     // Check sign bit (bit 7 of rx_data[0]):
; 0000 012A     if (rx_data[0] & 0x80)
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 012B     {
; 0000 012C         // Negative temperature (simple approach).
; 0000 012D         // We won't fully implement negative decoding here, but you could.
; 0000 012E         return -999; // Or do a real sign extension
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 012F     }
; 0000 0130     else
;PCODE: $00000191 VOL: 0
; 0000 0131     {
; 0000 0132         // Positive: integer portion is bits 6..0
; 0000 0133         tempC = (rx_data[0] & 0x7F); // 0..127
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0134         // If the fraction bit is set, we might add +0.5 or round up
; 0000 0135         // We'll do simple rounding to the nearest integer
; 0000 0136         if (rx_data[1] & 0x80)
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0137         {
; 0000 0138             // fraction = 0.5 => round up
; 0000 0139             tempC += 1;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 013A         }
; 0000 013B     }
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 013C     return tempC;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 013D }
;PCODE: $000001A1 VOL: 0
;// ------------------------ LM75 Routines end------------------------
;
;
;// ---------------------------keypad---------------------------------
;int read_keypad_2x2(void)
; 0000 0143 {
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0144     int key = 0;
; 0000 0145 
; 0000 0146     //--- 1) Enable pull-ups on PA6..PA7 (the columns) ---
; 0000 0147     PORTA |= (1<<6) | (1<<7);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;	key -> R16,R17
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0148 
; 0000 0149     //--- 2) Drive Row0=low (PA4=0), Row1=high (PA5=1) ---
; 0000 014A     PORTA &= ~(1<<4);  // row0=0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 014B     PORTA |=  (1<<5);  // row1=1
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 014C     delay_ms(5);       // wait a bit for signals to settle
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 014D 
; 0000 014E     // Check column lines (PA6, PA7)
; 0000 014F     if(!(PINA & (1<<6))) key = 1;  // Row0/Col0 => Key1
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0150     if(!(PINA & (1<<7))) key = 2;  // Row0/Col1 => Key2
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0151 
; 0000 0152     //--- 3) Drive Row0=high (PA4=1), Row1=low (PA5=0) ---
; 0000 0153     PORTA |=  (1<<4);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0154     PORTA &= ~(1<<5);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0155     delay_ms(5);
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0156 
; 0000 0157     // Check columns again
; 0000 0158     if(!(PINA & (1<<6))) key = 3;  // Row1/Col0 => Key3
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0159     if(!(PINA & (1<<7))) key = 4;  // Row1/Col1 => Key4
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 015A 
; 0000 015B     //--- 4) Restore rows high (optional) ---
; 0000 015C     PORTA |= (1<<4) | (1<<5);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 015D 
; 0000 015E     return key;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 015F }
;PCODE: $000001D7 VOL: 0
;
;
;int read_keypad_2x2_debounced(void)
; 0000 0163 {
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0164     // 1) Read raw key
; 0000 0165     firstKey = read_keypad_2x2();
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0166 
; 0000 0167     // 2) If no key is pressed => return 0
; 0000 0168     if(firstKey == 0)
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0169         return 0;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 016A 
; 0000 016B     // 3) Wait a short debounce time
; 0000 016C     delay_ms(30);  // ~20ms is typical
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 016D 
; 0000 016E     // 4) Read again
; 0000 016F     secondKey = read_keypad_2x2();
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0170 
; 0000 0171     // 5) If they match, return that key
; 0000 0172     if(secondKey == firstKey)
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 0173         return firstKey;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0174 
; 0000 0175     // 6) Otherwise, ignore (bounce) => return 0
; 0000 0176     return 0;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 0177 }
;PCODE: $000001F0 VOL: 0
;
;//---------------------------------------------------------------------------
;// Decrement fuel ~ once per second if direction != 0
;//---------------------------------------------------------------------------
;void update_fuel_usage(void)
; 0000 017D {
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 017E     if(directionFlag!=0)
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 017F     {
; 0000 0180         if(fuel_level>0) fuel_level--;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0181     }
;PCODE: $000001FB VOL: 0
; 0000 0182 }
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;
;//---------------------motor control ----------------------------------------
;void beep_when_reverse(void)
; 0000 0186 {
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0187     toggle = !toggle;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0188 
; 0000 0189     if(toggle)
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 018A         PORTC |=  (1<<6);
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 018B     else
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 018C         PORTC &= ~(1<<6);
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 018D 
; 0000 018E     delay_ms(50);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 018F 
; 0000 0190     PORTC &= ~(1<<6);  // ensure off
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0191 }
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;
;void setLeftMotorDirection(int forward)
; 0000 0194 {
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0195     // If forward=1 => forward
; 0000 0196     // If forward=-1 => reverse
; 0000 0197     // If forward=0 => stop
; 0000 0198     // Example for 2 motors on left side sharing in1..in4
; 0000 0199     if(forward == 1)
;PCODE: $00000218 VOL: 0
;	forward -> Y+0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 019A     {
; 0000 019B         // PC2=1, PC3=0, PC4=1, PC5=0 => forward
; 0000 019C         PORTC |=  (1<<2);
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 019D         PORTC &= ~(1<<3);
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 019E         PORTC |=  (1<<4);
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 019F         PORTC &= ~(1<<5);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 01A0     }
; 0000 01A1     else if(forward == -1)
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 01A2     {
; 0000 01A3         // PC2=0, PC3=1, PC4=0, PC5=1 => reverse
; 0000 01A4         PORTC &= ~(1<<2);
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 01A5         PORTC |=  (1<<3);
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 01A6         PORTC &= ~(1<<4);
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 01A7         PORTC |=  (1<<5);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 01A8     }
; 0000 01A9     else
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 01AA     {
; 0000 01AB         // Stop: clear all
; 0000 01AC         PORTC &= ~((1<<2)|(1<<3)|(1<<4)|(1<<5));
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 01AD     }
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 01AE }
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;
;void setLeftMotorSpeed(long int duty)
; 0000 01B1 {
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 01B2     if(duty < 0) duty = 0;
;PCODE: $0000023D VOL: 0
;	duty -> Y+0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 01B3     if(duty > PWM_TOP) duty = PWM_TOP;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 01B4     OCR1A = duty; // PD5 => left side motors
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 01B5 }
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;
;void setRightMotorSpeed(long int duty)
; 0000 01B8 {
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 01B9     if(duty < 0) duty = 0;
;PCODE: $00000251 VOL: 0
;	duty -> Y+0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 01BA     if(duty > PWM_TOP) duty = PWM_TOP;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 01BB     OCR1B = duty; // PD4 => right side motors
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 01BC }
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;
;void setRightMotorDirection(int forward)
; 0000 01BF {
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 01C0     if(forward == 1)
;PCODE: $00000265 VOL: 0
;	forward -> Y+0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 01C1     {
; 0000 01C2         // PB4=1, PB5=0, PB6=1, PB7=0 => forward
; 0000 01C3         PORTB |=  (1<<4);
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 01C4         PORTB &= ~(1<<5);
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 01C5         PORTB |=  (1<<6);
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 01C6         PORTB &= ~(1<<7);
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 01C7     }
; 0000 01C8     else if(forward == -1)
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 01C9     {
; 0000 01CA         // PB4=0, PB5=1, PB6=0, PB7=1 => reverse
; 0000 01CB         PORTB &= ~(1<<4);
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 01CC         PORTB |=  (1<<5);
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 01CD         PORTB &= ~(1<<6);
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 01CE         PORTB |=  (1<<7);
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 01CF     }
; 0000 01D0     else
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 01D1     {
; 0000 01D2         // Stop
; 0000 01D3         PORTB &= ~((1<<4)|(1<<5)|(1<<6)|(1<<7));
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 01D4     }
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 01D5 }
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;
;//---------------------motor control end --------------------------------------
;
;
;// External Interrupt 2 service routine
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 01DC {
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 01DD     printf("interrupt 2\n\r");
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 01DE     brake_applied = 1;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 01DF     int_button_used=!int_button_used;
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 01E0 }
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 01E4 {
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 01E5     static int count = 0;
; 0000 01E6     count++;
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 01E7 
; 0000 01E8     // ~31 overflows per second
; 0000 01E9     if(count >= 31)
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 01EA     {
; 0000 01EB         count = 0;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 01EC         seconds++;
;PCODE: $000002A4 VOL: 1
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 01ED         if(seconds >= 60)
;PCODE: $000002A8 VOL: 1
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 01EE         {
; 0000 01EF             seconds=0;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 1
; 0000 01F0             minutes++;
;PCODE: $000002AD VOL: 1
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 01F1             if(minutes >= 60)
;PCODE: $000002B1 VOL: 1
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 01F2             {
; 0000 01F3                 minutes = 0;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 1
; 0000 01F4                 hours++;
;PCODE: $000002B6 VOL: 1
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 01F5                 if(hours >= 24) hours=0;
;PCODE: $000002BA VOL: 1
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 1
; 0000 01F6             }
;PCODE: $000002BF VOL: 0
; 0000 01F7         }
;PCODE: $000002C0 VOL: 0
; 0000 01F8         // Decrement fuel if direction != 0
; 0000 01F9                update_fuel_usage();
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01FA 
; 0000 01FB         second_flag = 1;
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 1
; 0000 01FC 
; 0000 01FD     }
; 0000 01FE }
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0205 {
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 0206 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $000002CB VOL: 0
;	adc_input -> Y+0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 0207 // Delay needed for the stabilization of the ADC input voltage
; 0000 0208 delay_us(10);
;PCODE: $000002CF VOL: 0
; 0000 0209 // Start the AD conversion
; 0000 020A ADCSRA|=(1<<ADSC);
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 020B // Wait for the AD conversion to complete
; 0000 020C while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 020D ADCSRA|=(1<<ADIF);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 020E return ADCW;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 020F }
;PCODE: $000002DD VOL: 0
;
;
;void updateMotorControl(void)
; 0000 0213 {
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 0214     // 1) Read speed pot
; 0000 0215     int speed_adc = read_adc(0);  // 0..1023
; 0000 0216     // 2) Read steering pot
; 0000 0217     int steer_adc = read_adc(1);  // 0..1023
; 0000 0218 
; 0000 0219     // 3) Decide direction
; 0000 021A 
; 0000 021B     if(speed_adc > 512)
;PCODE: $000002E0 VOL: 0
;	speed_adc -> R16,R17
;	steer_adc -> R18,R19
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 021C         directionFlag = 1;
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 021D     else if(speed_adc < 512)
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 021E         directionFlag = -1;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 021F     else
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 0220         directionFlag = 0;
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0221 
; 0000 0222     // 4) Base speed = difference from 512 (max ~511)
; 0000 0223     //    map 0..511 => 0..PWM_TOP
; 0000 0224     baseSpeed = (directionFlag == 0) ? 0 : (speed_adc - 512);
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 0225     if(directionFlag == -1)
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 0226         baseSpeed = 512 - speed_adc; // if going reverse, speed is how far below 512
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0000 0227 
; 0000 0228     if(baseSpeed < 0) baseSpeed = -baseSpeed; // just in case
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 0229 
; 0000 022A     // Scale to 0..PWM_TOP
; 0000 022B     // baseSpeed * PWM_TOP / 511
; 0000 022C     scaledSpeed = (baseSpeed * PWM_TOP) / 511;
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 022D     if(scaledSpeed < 0) scaledSpeed = 0;
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 022E     if(scaledSpeed > PWM_TOP) scaledSpeed = PWM_TOP;
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 022F 
; 0000 0230     // 5) Steering offset
; 0000 0231     // steer_adc ~ 0..1023
; 0000 0232     // If <512 => left turn => left side slower, right side faster
; 0000 0233     // If >512 => right turn => left side faster, right side slower
; 0000 0234     // If =512 => no offset
; 0000 0235     steer_offset = steer_adc - 512; // range ~ -512..+511
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 0236 
; 0000 0237     // leftSpeed = scaledSpeed - offset
; 0000 0238     // rightSpeed= scaledSpeed + offset
; 0000 0239     // offsetScaled = (steer_offset * PWM_TOP) / 512
; 0000 023A     offsetScaled = (steer_offset * PWM_TOP) / 512;
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 023B     leftSpeedVal  = scaledSpeed - offsetScaled;
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 023C     rightSpeedVal = scaledSpeed + offsetScaled;
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 023D 
; 0000 023E     // clamp them
; 0000 023F     if(leftSpeedVal < 0)   leftSpeedVal = 0;
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 0240     if(leftSpeedVal > PWM_TOP)  leftSpeedVal = PWM_TOP;
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 0241     if(rightSpeedVal < 0)  rightSpeedVal = 0;
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0000 0242     if(rightSpeedVal > PWM_TOP) rightSpeedVal = PWM_TOP;
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 0243 
; 0000 0244     // 6) Set directions
; 0000 0245     // If directionFlag= 1 => forward. If -1 => reverse. If 0 => stop all.
; 0000 0246     setLeftMotorDirection(directionFlag);
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 0247     setRightMotorDirection(directionFlag);
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0000 0248 
; 0000 0249     // 7) Set speeds (PWM)
; 0000 024A     if(directionFlag == 0)
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 024B     {
; 0000 024C         // Stopped
; 0000 024D         setLeftMotorSpeed(0);
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 024E         setRightMotorSpeed(0);
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 024F     }
; 0000 0250     else if((brake_applied)&&(directionFlag!=0)) //Brake logic
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 0251         {
; 0000 0252               setLeftMotorSpeed(0); // Stopped
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 0253               setRightMotorSpeed(0); // Stopped
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 0254               setLeftMotorDirection(0);
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 0255               setRightMotorDirection(0);
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 0256               turn_brake_light = true;
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 0257               printf("[DBG] Brake applied.\r\n");
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0000 0258 
; 0000 0259             if((int_button_used== false)&&(brake_applied))
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 025A             {
; 0000 025B                 brake_applied=0;
;PCODE: $00000384 VOL: 0
; 0000 025C                 turn_brake_light = false;
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 025D                 printf("[DBG] Brake released.\r\n");
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 025E             }
; 0000 025F         }
;PCODE: $0000038E VOL: 0
; 0000 0260     else if(temp>70)
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 0261     {
; 0000 0262               setLeftMotorSpeed(0); // Stopped
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 0263               setRightMotorSpeed(0); // Stopped
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 0264               setLeftMotorDirection(0);
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0000 0265               setRightMotorDirection(0);
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0000 0266     }
; 0000 0267     else
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 0268     {
; 0000 0269         setLeftMotorSpeed(leftSpeedVal);
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 026A         setRightMotorSpeed(rightSpeedVal);
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 026B     }
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 026C }
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;
;void lcd_display(void){
; 0000 026E void lcd_display(void){
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
; 0000 026F                     sprintf(buffer,"speed:   %d", speed_value);
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 0270                     lcd_gotoxy(0,0);
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 0271                     lcd_print(buffer);
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 0272                     sprintf(buffer,"temp:   %d", temp);
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 0273                     lcd_gotoxy(0,1);
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
; 0000 0274                     lcd_print(buffer);
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
; 0000 0275                     sprintf(buffer,"fuel:   %d", fuel_level);
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 0276                     lcd_gotoxy(0,2);
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 0277                     lcd_print(buffer);
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 0278                     if(timer_toggle){
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0000 0279                     display_time_on_lcd();}
;PCODE: $000003E9 VOL: 0
; 0000 027A }
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;
;void main(void)
; 0000 027D {
;PCODE: $000003ED VOL: 0
; 0000 027E // -----------------------------------Declare your local variables here-----------------------------------------
; 0000 027F 
; 0000 0280 
; 0000 0281 
; 0000 0282 
; 0000 0283 
; 0000 0284 //--------------------------------------------------------------------------------------------------------------
; 0000 0285 
; 0000 0286 // Input/Output Ports initialization
; 0000 0287 {
; 0000 0288 // Port A initialization
; 0000 0289 // Function: Bit7=In Bit6=In Bit5=out Bit4=out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 028A DDRA=(0<<DDA7) | (0<<DDA6) | (1<<DDA5) | (1<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 028B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 028C PORTA=(0<<PORTA7) | (0<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
; 0000 028D 
; 0000 028E // Port B initialization
; 0000 028F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 0290 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 0291 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=1 Bit2=1 Bit1=T Bit0=T
; 0000 0292 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 0293 
; 0000 0294 // Port C initialization
; 0000 0295 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 0296 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
; 0000 0297 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 0298 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0000 0299 
; 0000 029A // Port D initialization
; 0000 029B // Function: Bit7=In Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 029C DDRD=(0<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0000 029D // State: Bit7=T Bit6=0 Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 029E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 029F }
; 0000 02A0 
; 0000 02A1 // Timer/Counter 0 initialization
; 0000 02A2 {
; 0000 02A3 // Clock source: System Clock
; 0000 02A4 // Clock value: 7.813 kHz
; 0000 02A5 // Mode: Normal top=0xFF
; 0000 02A6 // OC0 output: Disconnected
; 0000 02A7 // Timer Period: 32.768 ms
; 0000 02A8 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
; 0000 02A9 TCNT0=0x00;
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
; 0000 02AA OCR0=0x00;
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 02AB }
; 0000 02AC // Timer/Counter 1 initialization
; 0000 02AD {
; 0000 02AE // Clock source: System Clock
; 0000 02AF // Clock value: 1000.000 kHz
; 0000 02B0 // Mode: Ph. & fr. cor. PWM top=ICR1
; 0000 02B1 // OC1A output: Inverted PWM
; 0000 02B2 // OC1B output: Inverted PWM
; 0000 02B3 // Noise Canceler: Off
; 0000 02B4 // Input Capture on Falling Edge
; 0000 02B5 // Timer Period: 0.1 s
; 0000 02B6 // Output Pulse(s):
; 0000 02B7 // OC1A Period: 0.1 s Width: 0 us
; 0000 02B8 // OC1B Period: 0.1 s Width: 0 us
; 0000 02B9 // Timer1 Overflow Interrupt: Off
; 0000 02BA // Input Capture Interrupt: Off
; 0000 02BB // Compare A Match Interrupt: Off
; 0000 02BC // Compare B Match Interrupt: Off
; 0000 02BD //TCCR1A=(1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (0<<WGM10);
; 0000 02BE //TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
; 0000 02BF //TCNT1H=0x00;
; 0000 02C0 //TCNT1L=0x00;
; 0000 02C1 //ICR1H=0xC3;
; 0000 02C2 //ICR1L=0x50;
; 0000 02C3 //OCR1AH=0xC3;
; 0000 02C4 //OCR1AL=0x50;
; 0000 02C5 //OCR1BH=0xC3;
; 0000 02C6 //OCR1BL=0x50;
; 0000 02C7 
; 0000 02C8 // Timer/Counter 1 initialization
; 0000 02C9 // Clock source: System Clock
; 0000 02CA // Clock value: 1000.000 kHz
; 0000 02CB // Mode: Fast PWM top=ICR1
; 0000 02CC // OC1A output: Non-Inverted PWM
; 0000 02CD // OC1B output: Non-Inverted PWM
; 0000 02CE // Noise Canceler: Off
; 0000 02CF // Input Capture on Falling Edge
; 0000 02D0 // Timer Period: 10 ms
; 0000 02D1 // Output Pulse(s):
; 0000 02D2 // OC1A Period: 10 ms Width: 0 us
; 0000 02D3 // OC1B Period: 10 ms Width: 0 us
; 0000 02D4 // Timer1 Overflow Interrupt: Off
; 0000 02D5 // Input Capture Interrupt: Off
; 0000 02D6 // Compare A Match Interrupt: Off
; 0000 02D7 // Compare B Match Interrupt: Off
; 0000 02D8 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (0<<WGM10);
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 02D9 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
; 0000 02DA TCNT1H=0x00;
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
; 0000 02DB TCNT1L=0x00;
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0000 02DC ICR1H=0x27;
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 02DD ICR1L=0x10;
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
; 0000 02DE OCR1AH=0x00;
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 02DF OCR1AL=0x00;
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
; 0000 02E0 OCR1BH=0x00;
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0000 02E1 OCR1BL=0x00;
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 02E2 
; 0000 02E3 }
; 0000 02E4 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 02E5 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0000 02E6 
; 0000 02E7 // External Interrupt(s) initialization
; 0000 02E8 {
; 0000 02E9 // INT0: Off
; 0000 02EA // INT1: Off
; 0000 02EB // INT2: On
; 0000 02EC // INT2 Mode: Rising Edge
; 0000 02ED GICR|=(0<<INT1) | (0<<INT0) | (1<<INT2);
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0000 02EE MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
; 0000 02EF MCUCSR=(1<<ISC2);
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 02F0 GIFR=(0<<INTF1) | (0<<INTF0) | (1<<INTF2);
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 02F1 }
; 0000 02F2 // USART initialization
; 0000 02F3 {
; 0000 02F4 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 02F5 // USART Receiver: Off
; 0000 02F6 // USART Transmitter: On
; 0000 02F7 // USART Mode: Asynchronous
; 0000 02F8 // USART Baud Rate: 9600
; 0000 02F9 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0000 02FA UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0000 02FB UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
; 0000 02FC UBRRH=0x00;
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0000 02FD UBRRL=0x33;
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0000 02FE }
; 0000 02FF // ADC initialization
; 0000 0300 {
; 0000 0301 // ADC Clock frequency: 1000.000 kHz
; 0000 0302 // ADC Voltage Reference: AREF pin
; 0000 0303 // ADC Auto Trigger Source: ADC Stopped
; 0000 0304 ADMUX=ADC_VREF_TYPE;
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 0305 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0000 0306 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0000 0307 }
; 0000 0308 // TWI initialization
; 0000 0309 {
; 0000 030A // Mode: TWI Master
; 0000 030B // Bit Rate: 400 kHz
; 0000 030C     twi_master_init(400);
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 030D 
; 0000 030E }
; 0000 030F // Initialize the LCD
; 0000 0310     {
; 0000 0311     lcd_init();
;PCODE: $00000435 VOL: 0
; 0000 0312     lcd_cmd(0x01); // Clear display
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 0313     }
; 0000 0314 // Configure the LM75:
; 0000 0315 {
; 0000 0316     // 1) Put the config register = 0 => default: comparator mode, active-low OS, 9-bit, continuous
; 0000 0317     lm75_write_config(0x00);
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 0318     // 2) Set TOS = 70 °C
; 0000 0319     lm75_set_tos(70);
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
; 0000 031A }
; 0000 031B // Print initial message
; 0000 031C {
; 0000 031D     lcd_gotoxy(0, 0);
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 031E     lcd_print(" System Init...\r\n");
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
; 0000 031F     lcd_gotoxy(0, 1);
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0000 0320     lcd_print(" Tcrit=70C");
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0000 0321     lcd_cmd(0x01); // Clear
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 0322     lcd_print(" MehrzadGolabi");
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0000 0323     lcd_gotoxy(0, 1);
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0000 0324     lcd_print(" AZ Digital2 prj");
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
; 0000 0325     lcd_gotoxy(0, 2);
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 0326     lcd_print(" SBU");
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 0327     lcd_gotoxy(0, 3);
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0000 0328     lcd_print(" 1403");
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
; 0000 0329     delay_ms(1500);
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0000 032A     lcd_cmd(0x01); // Clear
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 032B 
; 0000 032C }
; 0000 032D 
; 0000 032E // Global enable interrupts
; 0000 032F #asm("sei")
;PCODE: $00000471 VOL: 0
	sei
;PCODE: $00000472 VOL: 0
; 0000 0330 
; 0000 0331 while (1)
;PCODE: $00000473 VOL: 0
; 0000 0332       {
; 0000 0333       // Read ADC
; 0000 0334         speed_value    = read_adc(0); // pot on PA0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
; 0000 0335         steering_value = read_adc(1); // pot on PA1
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
; 0000 0336 
; 0000 0337       // Temp
; 0000 0338       temp = lm75_read_temp();
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 0339 
; 0000 033A       // Debug stuff
; 0000 033B       printf("Speed=%d, Steering=%d, Temp=%d, Fuel=%d, directionFlag=%d , Brake=%d\r\n",
; 0000 033C        speed_value, steering_value, temp, fuel_level, directionFlag, brake_applied);
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 033D 
; 0000 033E       // keyboard handle menu, toggles, etc.
; 0000 033F         {
; 0000 0340             int key = read_keypad_2x2_debounced();
; 0000 0341             switch(key)
;PCODE: $00000495 VOL: 0
;	key -> Y+0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 0342             {
; 0000 0343                 case 1:
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 0344                     printf("[DBG] Key1\r\n");
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
; 0000 0345                     lcd_cmd(0x01);
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 0346                 break;
;PCODE: $000004A5 VOL: 0
; 0000 0347 
; 0000 0348                 case 2:
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 0349                     timer_toggle=!(timer_toggle);
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
; 0000 034A                     printf("[DBG] Key2\r\n");
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
; 0000 034B                     lcd_cmd(0x01);
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
; 0000 034C                 break;
;PCODE: $000004B6 VOL: 0
; 0000 034D 
; 0000 034E                 case 3:
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
; 0000 034F                     // Toggle headlights (PD6)
; 0000 0350                     headlights_on = !headlights_on;
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
; 0000 0351                     if(headlights_on)
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
; 0000 0352                         PORTD |=  (1<<6);
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 0353                     else
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
; 0000 0354                         PORTD &= ~(1<<6);
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
; 0000 0355                     printf("[DBG] Key3 => headlights_on=%d\r\n", headlights_on);
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
; 0000 0356                     lcd_cmd(0x01);
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 0357                 break;
;PCODE: $000004D4 VOL: 0
; 0000 0358 
; 0000 0359                 case 4:
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 0000 035A                     toggle_4=!toggle_4;
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 035B                     if(toggle_4)
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
; 0000 035C                         PORTC |=  (1<<6);
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
; 0000 035D                     else
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
; 0000 035E                         PORTC &= ~(1<<6);
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
; 0000 035F                     printf("[DBG] Key4 => honk\r\n", toggle_4);
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
; 0000 0360                     lcd_cmd(0x01);
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
; 0000 0361                 break;
;PCODE: $000004F3 VOL: 0
; 0000 0362 
; 0000 0363                 default:
;PCODE: $000004F4 VOL: 0
; 0000 0364                     // No key
; 0000 0365                 break;
;PCODE: $000004F5 VOL: 0
; 0000 0366             }
;PCODE: $000004F6 VOL: 0
; 0000 0367         }
;PCODE: $000004F7 VOL: 0
; 0000 0368 
; 0000 0369       // Brake light => PC7
; 0000 036A         if(turn_brake_light)
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
; 0000 036B             PORTC |=  (1<<7);
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 036C         else
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
; 0000 036D             PORTC &= ~(1<<7);
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 036E 
; 0000 036F       // Motor Control
; 0000 0370        updateMotorControl();
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
; 0000 0371 
; 0000 0372       // Beeping
; 0000 0373        if (directionFlag==-1)
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
; 0000 0374        {
; 0000 0375               beep_when_reverse();
;PCODE: $00000506 VOL: 0
; 0000 0376        }
; 0000 0377 
; 0000 0378        // LCD logic
; 0000 0379         if(second_flag) // handle menu updates once per second
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 1
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 0000 037A         {
; 0000 037B             second_flag = 0;  // reset the flag
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 1
; 0000 037C             lcd_display();
;PCODE: $0000050D VOL: 0
; 0000 037D         }
; 0000 037E 
; 0000 037F 
; 0000 0380         delay_ms(100);
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
; 0000 0381 
; 0000 0382       }
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0000 0383 }
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0

	.DSEG
_0x51:
	.BYTE 0x48
;
;
